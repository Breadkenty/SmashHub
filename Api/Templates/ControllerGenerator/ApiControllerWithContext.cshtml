@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @namespaceName;
    }
}

namespace @Model.ControllerNamespace
{
@{
    string routePrefix = "api/" + Model.ControllerRootName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = Model.ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
}
    // All of these routes will be at the base URL:     /@routePrefix
    // That is what "api/[controller]" means below. It uses the name of the controller
    // in this case @Model.ControllerName to determine the URL
    [Route("api/[controller]")]
    [ApiController]
    public class @Model.ControllerName : ControllerBase
    {
        // This is the variable you use to have access to your database
        private readonly @Model.ContextTypeName _context;

        // Constructor that recives a reference to your database context
        // and stores it in _context for you to use in your API methods
        public @(Model.ControllerName)(@Model.ContextTypeName context)
        {
            _context = context;
        }

        // GET: @routePrefix
        //
        // Returns a list of all your @(entitySetName)
        //
        [HttpGet]
        public async Task<ActionResult<IEnumerable<@(Model.ModelTypeName)>>> Get@(entitySetName)()
        {
            // Uses the database context in `_context` to request all of the @(entitySetName) and
            // return them as a JSON array.
            return await _context.@(entitySetName).ToListAsync();
        }

        // GET: @routePrefix/5
        //
        // Fetches and returns a specific @Model.ModelVariable by finding it by id. The id is specified in the
        // URL. In the sample URL above it is the `5`.  The "{id}" in the [HttpGet("{id}")] is what tells dotnet
        // to grab the id from the URL. It is then made available to us as the `id` argument to the method.
        //
        [HttpGet("{id}")]
        public async Task<ActionResult<@(Model.ModelTypeName)>> Get@(Model.ModelTypeName)(@primaryKeyShortTypeName id)
        {
            // Find the @Model.ModelVariable in the database using `FindAsync` to look it up by id
            var @Model.ModelVariable = await _context.@(entitySetName).FindAsync(id);

            // If we didn't find anything, we receive a `null` in return
            if (@Model.ModelVariable == null)
            {
                // Return a `404` response to the client indicating we could not find a @Model.ModelVariable with this id
                return NotFound();
            }

            //  Return the @Model.ModelVariable as a JSON object.
            return @Model.ModelVariable;
        }

        // PUT: @routePrefix/5
        //
        // Update an individual @Model.ModelVariable with the requested id. The id is specified in the URL
        // In the sample URL above it is the `5`. The "{id} in the [HttpPut("{id}")] is what tells dotnet
        // to grab the id from the URL. It is then made available to us as the `id` argument to the method.
        //
        // In addition the `body` of the request is parsed and then made available to us as a @Model.ModelTypeName
        // variable named @(Model.ModelVariable). The controller matches the keys of the JSON object the client
        // supplies to the names of the attributes of our @Model.ModelTypeName POCO class. This represents the
        // new values for the record.
        //
        [HttpPut("{id}")]
        public async Task<IActionResult> Put@(Model.ModelTypeName)(@primaryKeyShortTypeName id, @Model.ModelTypeName @Model.ModelVariable)
        {
            // If the ID in the URL does not match the ID in the supplied request body, return a bad request
            if (id != @(Model.ModelVariable).@primaryKeyName)
            {
                return BadRequest();
            }

            // Tell the database to consider everything in @Model.ModelVariable to be _updated_ values. When
            // the save happens the database will _replace_ the values in the database with the ones from @Model.ModelVariable
            _context.Entry(@Model.ModelVariable).State = EntityState.Modified;

            try
            {
                // Try to save these changes.
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                // Ooops, looks like there was an error, so check to see if the record we were
                // updating no longer exists.
                if (!@(Model.ModelTypeName)Exists(id))
                {
                    // If the record we tried to update was already deleted by someone else,
                    // return a `404` not found
                    return NotFound();
                }
                else
                {
                    // Otherwise throw the error back, which will cause the request to fail
                    // and generate an error to the client.
                    throw;
                }
            }

            // return NoContent to indicate the update was done. Alternatively you can use the
            // following to send back a copy of the updated data.
            //
            // return Ok(@Model.ModelVariable)
            //
            return NoContent();
        }

        // POST: @routePrefix
        //
        // Creates a new @Model.ModelVariable in the database.
        //
        // The `body` of the request is parsed and then made available to us as a @Model.ModelTypeName
        // variable named @(Model.ModelVariable). The controller matches the keys of the JSON object the client
        // supplies to the names of the attributes of our @Model.ModelTypeName POCO class. This represents the
        // new values for the record.
        //
        [HttpPost]
        public async Task<ActionResult<@(Model.ModelTypeName)>> Post@(Model.ModelTypeName)(@Model.ModelTypeName @Model.ModelVariable)
        {
            // Indicate to the database context we want to add this new record
            _context.@(entitySetName).Add(@Model.ModelVariable);
@{
    if (primaryKeyIsAutoGenerated)
    {
            // Save the changes in the database.
            @:await _context.SaveChangesAsync();
    }
    else
    {
            @:try
            @:{
                // Save the changes in the database.
                @:await _context.SaveChangesAsync();
            @:}
            @:catch (DbUpdateException)
            @:{
                // If we found that this row already existed
                @:if (@(Model.ModelTypeName)Exists(@(Model.ModelVariable).@primaryKeyName))
                @:{
                    // Return a conflict status
                    @:return Conflict();
                @:}
                @:else
                @:{
                    // Otherwise throw the error back, which will cause the request to fail
                    // and generate an error to the client.
                    @:throw;
                @:}
            @:}
    }
}

            // Return a response that indicates the object was created (status code `201`) and some additional
            // headers with details of the newly created object.
            return CreatedAtAction("Get@(Model.ModelTypeName)", new { id = @(Model.ModelVariable).@primaryKeyName }, @Model.ModelVariable);
        }

        // DELETE: @routePrefix/5
        //
        // Deletes an individual @Model.ModelVariable with the requested id. The id is specified in the URL
        // In the sample URL above it is the `5`. The "{id} in the [HttpDelete("{id}")] is what tells dotnet
        // to grab the id from the URL. It is then made available to us as the `id` argument to the method.
        //
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete@(Model.ModelTypeName)(@primaryKeyShortTypeName id)
        {
            // Find this @Model.ModelVariable by looking for the specific id
            var @Model.ModelVariable = await _context.@(entitySetName).FindAsync(id);
            if (@Model.ModelVariable == null)
            {
                // There wasn't a @Model.ModelVariable with that id so return a `404` not found
                return NotFound();
            }

            // Tell the database we want to remove this record
            _context.@(entitySetName).Remove(@Model.ModelVariable);

            // Tell the database to perform the deletion
            await _context.SaveChangesAsync();

            // return NoContent to indicate the update was done. Alternatively you can use the
            // following to send back a copy of the deleted data.
            //
            // return Ok(@Model.ModelVariable)
            //
            return NoContent();
        }

        // Private helper method that looks up an existing @Model.ModelVariable by the supplied id
        private bool @(Model.ModelTypeName)Exists(@primaryKeyShortTypeName id)
        {
            return _context.@(entitySetName).Any(@Model.ModelVariable => @Model.ModelVariable.@primaryKeyName == id);
        }
    }
}
